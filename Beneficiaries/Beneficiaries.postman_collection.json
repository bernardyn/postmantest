{
	"info": {
		"_postman_id": "255efa0f-5a57-4cf9-a9bf-3f7cbf60212b",
		"name": "Beneficiaries",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2157018",
		"_collection_link": "https://grey-moon-7219.postman.co/workspace/idea-andrzej~8c5f6526-d001-4cf1-9f7f-c0595b3ff20a/collection/2157018-255efa0f-5a57-4cf9-a9bf-3f7cbf60212b?action=share&creator=2157018&source=collection_link"
	},
	"item": [
		{
			"name": "Create beneficiary-andrzej",
			"item": [
				{
					"name": "create beneficiary - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 200 - OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'beneficiaryId',\r",
									"    'accountId',\r",
									"    'type',\r",
									"    'name',\r",
									"    'createdAt']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.beneficiaryId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.accountId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.type).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.name).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.createdAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"4 Check address has required fields\", () => {\r",
									"let requiredKeys = [\r",
									"    'addressLine1', \r",
									"    'stateOrProvince', \r",
									"    'postcode'\r",
									"]\r",
									"requiredKeys.forEach(key =>{\r",
									"if(responseJson.address.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"5 Check that address has correct field types\", () => {\r",
									"        pm.expect(responseJson.address.addressLine1).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.stateOrProvince).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.postcode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"6 Check that type fields includes expected values\", () => {\r",
									"        pm.expect(responseJson.type).to.be.oneOf([\"BUSINESS\",\"INDIVIDUAL\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"7 Check that beneficiaryId has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});\r",
									"\r",
									"pm.test(\"8 Check that accountID has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "create beneficiary - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 400 - Bad request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'messages']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.messages).to.be.a(\"array\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"4 Check message has required fields and type\", () => {\r",
									"let requiredKeys = [\r",
									"    'message']\r",
									"\r",
									"requiredKeys.forEach(key =>{\r",
									"         responseJson.messages.forEach(elem =>{\r",
									"            if(elem.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                pm.expect(elem.message).to.be.a(\"string\")\r",
									"                }\r",
									"            else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "invalid-request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "create beneficiary - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 403 - Forbidden\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "unauthorized",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "create beneficiary - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 404 - \", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "not-found",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "create beneficiary - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 500 - \", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.response.to.have.status(\"Internal Server Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "internal-server-error",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy paths",
			"item": [
				{
					"name": "get beneficiary - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 200 - OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'beneficiaryId',\r",
									"    'accountId',\r",
									"    'type',\r",
									"    'name',\r",
									"    'createdAt']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.beneficiaryId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.accountId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.type).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.name).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.createdAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"4 Check address has required fields\", () => {\r",
									"let requiredKeys = [\r",
									"    'addressLine1', \r",
									"    'stateOrProvince', \r",
									"    'postcode'\r",
									"]\r",
									"requiredKeys.forEach(key =>{\r",
									"if(responseJson.address.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"5 Check that address has correct field types\", () => {\r",
									"        pm.expect(responseJson.address.addressLine1).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.stateOrProvince).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.postcode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"6 Check that type fields includes expected values\", () => {\r",
									"        pm.expect(responseJson.type).to.be.oneOf([\"BUSINESS\",\"INDIVIDUAL\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"7 Check that beneficiaryId has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});\r",
									"\r",
									"pm.test(\"8 Check that accountID has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries/{{beneficiaryId}}",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries",
								"{{beneficiaryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all beneficiaries-andrzej",
			"item": [
				{
					"name": "get all beneficiaries - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 200 - OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'beneficiaryId',\r",
									"    'accountId',\r",
									"    'type',\r",
									"    'name',\r",
									"    'createdAt']\r",
									"\r",
									"     requiredKeys.forEach(key =>{\r",
									"         responseJson.beneficiaries.forEach(elem =>{\r",
									"            if(elem.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"            else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"    responseJson.beneficiaries.forEach(elem =>{\r",
									"        pm.expect(elem.beneficiaryId).to.be.a(\"string\");\r",
									"        pm.expect(elem.accountId).to.be.a(\"string\");\r",
									"        pm.expect(elem.type).to.be.a(\"string\");\r",
									"        pm.expect(elem.name).to.be.a(\"string\");\r",
									"        pm.expect(elem.createdAt).to.be.a(\"string\");\r",
									"    })\r",
									"});\r",
									"\r",
									"//address\r",
									"pm.test(\"4 Check address has required fields\", () => {\r",
									"let requiredKeys = [\r",
									"    'addressLine1', \r",
									"    'stateOrProvince', \r",
									"    'postcode'\r",
									"]\r",
									"requiredKeys.forEach(key =>{\r",
									"         responseJson.beneficiaries.forEach(elem =>{\r",
									"            if(elem.address.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(elem.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"            else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(elem.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"5 Check that address has correct field types\", () => {\r",
									"    responseJson.beneficiaries.forEach(elem =>{\r",
									"        pm.expect(elem.address.addressLine1).to.be.a(\"string\");\r",
									"        pm.expect(elem.address.stateOrProvince).to.be.a(\"string\");\r",
									"        pm.expect(elem.address.postcode).to.be.a(\"string\");\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"6 Check that type fields includes expected values\", () => {\r",
									"    responseJson.beneficiaries.forEach(elem =>{\r",
									"        pm.expect(elem.type).to.be.oneOf([\"BUSINESS\",\"INDIVIDUAL\"]);\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"7 Check that beneficiaryId has pattern\", () => {\r",
									"    responseJson.beneficiaries.forEach(elem =>{\r",
									"        pm.expect(elem.beneficiaryId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"8 Check that accountID has pattern\", () => {\r",
									"    responseJson.beneficiaries.forEach(elem =>{\r",
									"        pm.expect(elem.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all beneficiaries - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 400 - Bad request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'messages']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.messages).to.be.a(\"array\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"4 Check message has required fields and type\", () => {\r",
									"let requiredKeys = [\r",
									"    'message']\r",
									"\r",
									"requiredKeys.forEach(key =>{\r",
									"         responseJson.messages.forEach(elem =>{\r",
									"            if(elem.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                pm.expect(elem.message).to.be.a(\"string\")\r",
									"                }\r",
									"            else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "invalid-request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all beneficiaries - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 403 - Forbidden\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "unauthorized",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all beneficiaries - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 500 - \", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.response.to.have.status(\"Internal Server Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "internal-server-error",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update beneficiary-andrzej",
			"item": [
				{
					"name": "update beneficiary - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 200 - OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'beneficiaryId',\r",
									"    'accountId',\r",
									"    'type',\r",
									"    'name',\r",
									"    'createdAt']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.beneficiaryId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.accountId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.type).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.name).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.createdAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"4 Check address has required fields\", () => {\r",
									"let requiredKeys = [\r",
									"    'addressLine1', \r",
									"    'stateOrProvince', \r",
									"    'postcode'\r",
									"]\r",
									"requiredKeys.forEach(key =>{\r",
									"if(responseJson.address.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"5 Check that address has correct field types\", () => {\r",
									"        pm.expect(responseJson.address.addressLine1).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.stateOrProvince).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.postcode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"6 Check that type fields includes expected values\", () => {\r",
									"        pm.expect(responseJson.type).to.be.oneOf([\"BUSINESS\",\"INDIVIDUAL\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"7 Check that beneficiaryId has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});\r",
									"\r",
									"pm.test(\"8 Check that accountID has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Timmy Sr\",\n\"type\": \"BUSINESS\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries/{{beneficiaryId}}",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries",
								"{{beneficiaryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update beneficiary - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 400 - Bad request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'messages']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.messages).to.be.a(\"array\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"4 Check message has required fields and type\", () => {\r",
									"let requiredKeys = [\r",
									"    'message']\r",
									"\r",
									"requiredKeys.forEach(key =>{\r",
									"         responseJson.messages.forEach(elem =>{\r",
									"            if(elem.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                pm.expect(elem.message).to.be.a(\"string\")\r",
									"                }\r",
									"            else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "invalid-request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries{{beneficiaryId}}",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries{{beneficiaryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update beneficiary - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 403 - Forbidden\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "unauthorized",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries{{beneficiaryId}}",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries{{beneficiaryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update beneficiary - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 500 - \", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.response.to.have.status(\"Internal Server Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "internal-server-error",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries{{beneficiaryId}}",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries{{beneficiaryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Archive beneficiary-andrzej",
			"item": [
				{
					"name": "archive beneficiary - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 200 - OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'beneficiaryId',\r",
									"    'accountId',\r",
									"    'type',\r",
									"    'name',\r",
									"    'createdAt']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.beneficiaryId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.accountId).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.type).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.name).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.createdAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"4 Check address has required fields\", () => {\r",
									"let requiredKeys = [\r",
									"    'addressLine1', \r",
									"    'stateOrProvince', \r",
									"    'postcode'\r",
									"]\r",
									"requiredKeys.forEach(key =>{\r",
									"if(responseJson.address.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.address.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"5 Check that address has correct field types\", () => {\r",
									"        pm.expect(responseJson.address.addressLine1).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.stateOrProvince).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.address.postcode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"6 Check that type fields includes expected values\", () => {\r",
									"        pm.expect(responseJson.type).to.be.oneOf([\"BUSINESS\",\"INDIVIDUAL\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"7 Check that beneficiaryId has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});\r",
									"\r",
									"pm.test(\"8 Check that accountID has pattern\", () => {\r",
									"        pm.expect(responseJson.accountId).to.match\r",
									"        (/^@?(?:[A-Za-z0-9\\-_]{4})*(?:[A-Za-z0-9\\-_]{2}==|[A-Za-z0-9-_]{3}=)?$/);\r",
									"});\r",
									"\r",
									"pm.test(\"9 archivedAt field is not null\", () => {\r",
									"        pm.expect(responseJson.archivedAt).not.eq(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries/{{beneficiaryId}}/archive",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries",
								"{{beneficiaryId}}",
								"archive"
							]
						}
					},
					"response": []
				},
				{
					"name": "archive beneficiary - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 400 - Bad request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'messages']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.messages).to.be.a(\"array\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"4 Check message has required fields and type\", () => {\r",
									"let requiredKeys = [\r",
									"    'message']\r",
									"\r",
									"requiredKeys.forEach(key =>{\r",
									"         responseJson.messages.forEach(elem =>{\r",
									"            if(elem.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                pm.expect(elem.message).to.be.a(\"string\")\r",
									"                }\r",
									"            else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(elem.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "invalid-request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries{{beneficiaryId}}/archive",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries{{beneficiaryId}}",
								"archive"
							]
						}
					},
					"response": []
				},
				{
					"name": "archive beneficiary - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 403 - Forbidden\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "unauthorized",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries{{beneficiaryId}}/archive",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries{{beneficiaryId}}",
								"archive"
							]
						}
					},
					"response": []
				},
				{
					"name": "archive beneficiary - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"1 Status code is 500 - \", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.response.to.have.status(\"Internal Server Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"2 Check that response object data have all required keys\", () => {\r",
									"let requiredKeys = [\r",
									"    'id',\r",
									"    'message']\r",
									"\r",
									"    requiredKeys.forEach(key =>{\r",
									"        if(responseJson.hasOwnProperty(key) == true)\r",
									"                {\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"        else{\r",
									"                console.log(key+' is required but not found in response')\r",
									"                pm.expect(responseJson.hasOwnProperty(key)).to.be.true\r",
									"                }\r",
									"         })\r",
									"});\r",
									"\r",
									"pm.test(\"3 Check that response object has correct field types\", () => {\r",
									"        pm.expect(responseJson.id).to.be.a(\"string\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-header",
								"value": "internal-server-error",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"type\": \"INDIVIDUAL\",\n    \"name\": \"Andrzej tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{engineUrl}}/accounts/{{accountId}}/beneficiaries{{beneficiaryId}}/archive",
							"host": [
								"{{engineUrl}}"
							],
							"path": [
								"accounts",
								"{{accountId}}",
								"beneficiaries{{beneficiaryId}}",
								"archive"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
